{"ast":null,"code":"// This optional code is used to register a service worker.\n// It enables the app to load faster on subsequent visits in production\n// and gives it offline capabilities. However, this comes with some pitfalls.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.\\d+){0,3}\\.\\d+$/));\nconst register = config => {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker.');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\nconst registerValidSW = (swUrl, config) => {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available; please refresh.');\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n};\nconst checkValidServiceWorker = (swUrl, config) => {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n};\nexport { register };","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload"],"sources":["/home/bhargav/ecs1/ecs/wist weal/client/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// It enables the app to load faster on subsequent visits in production\n// and gives it offline capabilities. However, this comes with some pitfalls.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.\\d+){0,3}\\.\\d+$/\n    )\n);\n\nconst register = (config) => {\n    if ('serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service worker.'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n};\n\nconst registerValidSW = (swUrl, config) => {\n    navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        console.log(\n                            'New content is available; please refresh.'\n                        );\n                    } else {\n                        console.log('Content is cached for offline use.');\n                    }\n                }\n            };\n        };\n    }).catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl, config) => {\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    }).then(response => {\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            registerValidSW(swUrl, config);\n        }\n    }).catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n    });\n};\n\nexport { register };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}